{"version":3,"file":"Flow.js","sourceRoot":"","sources":["../../src/webview/Flow.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport ReactFlow, {\n  addEdge,\n  MiniMap,\n  Panel,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  ReactFlowInstance\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { ConnectionLineType } from \"../types/connection\";\nimport FlowBuilder from './flowBuilder';\n\nconst onInit = (reactFlowInstance: ReactFlowInstance) =>\n  console.log(\"flow loaded:\", reactFlowInstance);\n\nconst OverviewFlow = () => {\n  const initialNodes = [];\n  const initialEdges = [];\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge({ ...params, type: ConnectionLineType.Bezier, animated: true }, eds)),\n    []\n  );\n\n  useEffect(() => {\n    window.addEventListener('message', (e) => {\n      const msg = e.data; // object containing type prop and value prop\n      switch (msg.type) {\n        case 'parsed-data': {\n          const results = new FlowBuilder(msg.value);\n          results.build(msg.settings)\n          setNodes(results.initialNodes);\n          setEdges(results.initialEdges);\n          break;\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      onInit={onInit}\n      fitView\n      attributionPosition=\"top-right\"\n    >\n      <MiniMap\n        nodeStrokeColor={(n): string => {\n          if (n.style?.backgroundColor) return n.style.backgroundColor;\n          if (n.type === \"default\") return \"#1a192b\";\n\n          return \"#eee\";\n        }}\n        nodeColor={(n): string => {\n          if (n.style?.backgroundColor) return n.style.backgroundColor;\n          return \"#fff\";\n        }}\n        nodeBorderRadius={2}\n      />\n      <Panel position=\"top-left\">\n        <div className=\"text-black\">\n          <div className=\"flex justify-end place-items-end shadow-lg bg-slate-50 w-20 h-15\">\n            <p className=\"pl-2 pr-2 py-2\">Client: <span className=\"bg-orange text-transparent rounded-full\">00</span></p>\n          </div>\n          <div className=\"flex justify-end place-items-end shadow-lg bg-slate-50 w-20 h-15\">\n            <p className=\"pl-2 pr-2 pb-2\">Server: <span className=\"bg-blue text-transparent  rounded-full\">00</span></p>\n          </div>\n        </div>\n      </Panel >\n      <Controls />\n      <Background color=\"#aaa\" gap={16} />\n    </ReactFlow >\n  );\n};\n\nexport default OverviewFlow;\n"]}