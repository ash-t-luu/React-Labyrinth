{"version":3,"file":"panel.js","sourceRoot":"","sources":["../src/panel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,yCAAsC;AAGtC,SAAgB,WAAW,CAAC,OAAgC,EAAE,IAAU;IACpE,sEAAsE;IAEtE,2DAA2D;IAC3D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAC1C,gBAAgB,EAChB,iBAAiB;IACjB,qBAAqB;IACrB,MAAM,CAAC,UAAU,CAAC,GAAG,EACrB;QACI,aAAa,EAAE,IAAI;QACnB,uBAAuB,EAAE,IAAI;KAChC,CACJ,CAAC;IAEF,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IAEnF,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAEnF,2CAA2C;IAC3C,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAEzD,8BAA8B;IAC9B,KAAK,CAAC,OAAO,CAAC,IAAI,GAAG,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAExD,kHAAkH;IAElH,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAC7B,CAAO,GAAQ,EAAE,EAAE;QACf,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC;YACf,KAAK,QAAQ;gBACT,IAAI,CAAC,GAAG,CAAC,KAAK;oBAAE,MAAM;gBACtB,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,gBAAgB,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3D,uDAAuD;gBACvD,KAAK,CAAC,OAAO,CAAC,WAAW,CACrB;oBACI,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,cAAc;oBAChC,QAAQ,EAAE,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;iBAChE,CAAC,CAAC;gBACP,MAAM;QAEd,CAAC;IACL,CAAC,CAAA,EACD,SAAS,EACT,OAAO,CAAC,aAAa,CACxB,CAAC;AACN,CAAC;AA/CD,kCA+CC;AAAA,CAAC;AAEF,4HAA4H;AAC5H,MAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;AAEzB,+CAA+C;AAC/C,SAAS,iBAAiB,CAAC,GAAe,EAAE,WAAiB;IACzD,OAAO,CACH;;;;;;;;;;;;;;;qCAe6B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;;;;gCAIhC,KAAK,QAAQ,GAAG;;;SAGvC,CACJ,CAAA;AACL,CAAC","sourcesContent":["import * as vscode from 'vscode';\nimport { getNonce } from './getNonce';\nimport { Tree } from './types/tree';\n\nexport function createPanel(context: vscode.ExtensionContext, data: Tree) {\n    // if the current panel exists, then reveal the column, else make one?\n\n    // utilize method on vscode.window object to create webview\n    const panel = vscode.window.createWebviewPanel(\n        'reactLabyrinth',\n        'React Labyrinth',\n        // create one new tab\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true,\n            retainContextWhenHidden: true\n        }\n    );\n\n    panel.iconPath = vscode.Uri.joinPath(context.extensionUri, 'media', 'favicon.ico');\n\n    const bundlePath = vscode.Uri.joinPath(context.extensionUri, 'build', 'bundle.js');\n\n    // set webview URI to pass into html script\n    const bundleURI = panel.webview.asWebviewUri(bundlePath);\n\n    // render html of webview here\n    panel.webview.html = createWebviewHTML(bundleURI, data);\n\n    // will need to use onDidDispose to clear cached data and reset tree when the webview and/or application is closed\n\n    panel.webview.onDidReceiveMessage(\n        async (msg: any) => {\n            switch (msg.type) {\n                case 'onData':\n                    if (!msg.value) break;\n                    context.workspaceState.update('reactLabyrinth', msg.value);\n                    // console.log('msg.value from panel.js: ', msg.value);\n                    panel.webview.postMessage(\n                        {\n                            type: 'parsed-data',\n                            value: msg.value, // tree object\n                            settings: vscode.workspace.getConfiguration('reactLabyrinth')\n                        });\n                    break;\n\n            }\n        },\n        undefined,\n        context.subscriptions\n    );\n};\n\n// getNonce generates a new random string each time ext is used to prevent external injection of foreign code into the html \nconst nonce = getNonce();\n\n// function to create the HTML page for webview\nfunction createWebviewHTML(URI: vscode.Uri, initialData: Tree) {\n    return (\n        `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>React Labyrinth</title>\n            </head>\n            <body>\n                <div id=\"root\"></div>\n                <script>\n                    const vscode = acquireVsCodeApi();\n                    window.onload = () => {\n                        vscode.postMessage({\n                            type: 'onData',\n                            value: ${JSON.stringify(initialData)}\n                        });\n                    }\n                </script>\n                <script nonce=${nonce} src=${URI}></script>\n            </body>\n            </html>\n        `\n    )\n}\n"]}