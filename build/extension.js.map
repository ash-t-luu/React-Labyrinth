{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,mCAAoC;AACpC,qCAAkC;AAElC,yDAAyD;AACzD,0EAA0E;AAE1E,SAAS,QAAQ,CAAC,OAAgC;IAEjD,IAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE;QAC9E,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,mCAAmC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,kEAAkE;IAClE,gFAAgF;IAChF,uBAAuB;IACvB,yBAAyB;IACzB,MAAM;IAEN,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,sBAAsB,EAAE,GAAS,EAAE;QAClE,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,gBAAgB,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;QAE9H,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACnD,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,eAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QACxC,IAAA,mBAAW,EAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAA,CAAC,CAAC;IACH,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxC,CAAC;AAED,2DAA2D;AAC3D,SAAS,UAAU,KAAI,CAAC;AAExB,MAAM,CAAC,OAAO,GAAG;IAChB,QAAQ;IACR,UAAU;CACV,CAAA","sourcesContent":["import * as vscode from 'vscode';\nimport {createPanel} from './panel';\nimport { Parser } from './parser';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\n\nfunction activate(context: vscode.ExtensionContext) {\n\n\tlet disposable = vscode.commands.registerCommand('react-labyrinth.helloWorld', function () {\n\t\tvscode.window.showInformationMessage('Hello World from React Labyrinth!');\n\t});\n\n\t// pass in the command we want to register (refer to package.json)\n\t// let result = vscode.commands.registerCommand('myExtension.showPanel', () => {\n\t// \t// call helper func\n\t// \tcreatePanel(context);\n\t// });\n\n\tvscode.commands.registerCommand('myExtension.pickFile', async () => {\n\t\tconst fileArray = await vscode.window.showOpenDialog({ canSelectFolders: false, canSelectFiles: true, canSelectMany: false });\n\t\t\n\t\tif (!fileArray || fileArray.length === 0) {\n\t\t\tvscode.window.showErrorMessage('No file selected');\n\t\t\treturn;\n\t\t}\n\t\n\t\tconst tree = new Parser(fileArray[0].path);\n\t\ttree.parse();\n\t\tconst data = tree.getTree();\n\t\tconsole.log('Data sent back: \\n', data);\n\t\tcreatePanel(context, data);\n\t});\n\tcontext.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nfunction deactivate() {}\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}\n"]}